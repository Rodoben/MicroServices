// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package MultiplicationPb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MultiplicationServiceClient is the client API for MultiplicationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MultiplicationServiceClient interface {
	MultiplicationTableWithDeadline(ctx context.Context, in *MultiplicationRequest, opts ...grpc.CallOption) (MultiplicationService_MultiplicationTableWithDeadlineClient, error)
}

type multiplicationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMultiplicationServiceClient(cc grpc.ClientConnInterface) MultiplicationServiceClient {
	return &multiplicationServiceClient{cc}
}

func (c *multiplicationServiceClient) MultiplicationTableWithDeadline(ctx context.Context, in *MultiplicationRequest, opts ...grpc.CallOption) (MultiplicationService_MultiplicationTableWithDeadlineClient, error) {
	stream, err := c.cc.NewStream(ctx, &MultiplicationService_ServiceDesc.Streams[0], "/MultiplicationPb.MultiplicationService/MultiplicationTableWithDeadline", opts...)
	if err != nil {
		return nil, err
	}
	x := &multiplicationServiceMultiplicationTableWithDeadlineClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MultiplicationService_MultiplicationTableWithDeadlineClient interface {
	Recv() (*MultiplicationResponse, error)
	grpc.ClientStream
}

type multiplicationServiceMultiplicationTableWithDeadlineClient struct {
	grpc.ClientStream
}

func (x *multiplicationServiceMultiplicationTableWithDeadlineClient) Recv() (*MultiplicationResponse, error) {
	m := new(MultiplicationResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MultiplicationServiceServer is the server API for MultiplicationService service.
// All implementations must embed UnimplementedMultiplicationServiceServer
// for forward compatibility
type MultiplicationServiceServer interface {
	MultiplicationTableWithDeadline(*MultiplicationRequest, MultiplicationService_MultiplicationTableWithDeadlineServer) error
	//mustEmbedUnimplementedMultiplicationServiceServer()
}

// UnimplementedMultiplicationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMultiplicationServiceServer struct {
}

func (UnimplementedMultiplicationServiceServer) MultiplicationTableWithDeadline(*MultiplicationRequest, MultiplicationService_MultiplicationTableWithDeadlineServer) error {
	return status.Errorf(codes.Unimplemented, "method MultiplicationTableWithDeadline not implemented")
}
func (UnimplementedMultiplicationServiceServer) mustEmbedUnimplementedMultiplicationServiceServer() {}

// UnsafeMultiplicationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MultiplicationServiceServer will
// result in compilation errors.
type UnsafeMultiplicationServiceServer interface {
	mustEmbedUnimplementedMultiplicationServiceServer()
}

func RegisterMultiplicationServiceServer(s grpc.ServiceRegistrar, srv MultiplicationServiceServer) {
	s.RegisterService(&MultiplicationService_ServiceDesc, srv)
}

func _MultiplicationService_MultiplicationTableWithDeadline_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(MultiplicationRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MultiplicationServiceServer).MultiplicationTableWithDeadline(m, &multiplicationServiceMultiplicationTableWithDeadlineServer{stream})
}

type MultiplicationService_MultiplicationTableWithDeadlineServer interface {
	Send(*MultiplicationResponse) error
	grpc.ServerStream
}

type multiplicationServiceMultiplicationTableWithDeadlineServer struct {
	grpc.ServerStream
}

func (x *multiplicationServiceMultiplicationTableWithDeadlineServer) Send(m *MultiplicationResponse) error {
	return x.ServerStream.SendMsg(m)
}

// MultiplicationService_ServiceDesc is the grpc.ServiceDesc for MultiplicationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MultiplicationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MultiplicationPb.MultiplicationService",
	HandlerType: (*MultiplicationServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "MultiplicationTableWithDeadline",
			Handler:       _MultiplicationService_MultiplicationTableWithDeadline_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "MultiplicationPb.proto",
}
