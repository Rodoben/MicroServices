// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package CalculateSI

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalculateSIServiceClient is the client API for CalculateSIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculateSIServiceClient interface {
	CalculateSiAndTotAmount(ctx context.Context, in *CalculateSIRequest, opts ...grpc.CallOption) (*CalculateSIResponse, error)
	CalculateSiAndTotAmountWithDeadline(ctx context.Context, in *CalculateSIRequest, opts ...grpc.CallOption) (*CalculateSIResponse, error)
}

type calculateSIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculateSIServiceClient(cc grpc.ClientConnInterface) CalculateSIServiceClient {
	return &calculateSIServiceClient{cc}
}

func (c *calculateSIServiceClient) CalculateSiAndTotAmount(ctx context.Context, in *CalculateSIRequest, opts ...grpc.CallOption) (*CalculateSIResponse, error) {
	out := new(CalculateSIResponse)
	err := c.cc.Invoke(ctx, "/CalculateSI.CalculateSIService/CalculateSiAndTotAmount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculateSIServiceClient) CalculateSiAndTotAmountWithDeadline(ctx context.Context, in *CalculateSIRequest, opts ...grpc.CallOption) (*CalculateSIResponse, error) {
	out := new(CalculateSIResponse)
	err := c.cc.Invoke(ctx, "/CalculateSI.CalculateSIService/CalculateSiAndTotAmountWithDeadline", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculateSIServiceServer is the server API for CalculateSIService service.
// All implementations must embed UnimplementedCalculateSIServiceServer
// for forward compatibility
type CalculateSIServiceServer interface {
	CalculateSiAndTotAmount(context.Context, *CalculateSIRequest) (*CalculateSIResponse, error)
	CalculateSiAndTotAmountWithDeadline(context.Context, *CalculateSIRequest) (*CalculateSIResponse, error)
	//mustEmbedUnimplementedCalculateSIServiceServer()
}

// UnimplementedCalculateSIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCalculateSIServiceServer struct {
}

func (UnimplementedCalculateSIServiceServer) CalculateSiAndTotAmount(context.Context, *CalculateSIRequest) (*CalculateSIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateSiAndTotAmount not implemented")
}
func (UnimplementedCalculateSIServiceServer) CalculateSiAndTotAmountWithDeadline(context.Context, *CalculateSIRequest) (*CalculateSIResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateSiAndTotAmountWithDeadline not implemented")
}
func (UnimplementedCalculateSIServiceServer) mustEmbedUnimplementedCalculateSIServiceServer() {}

// UnsafeCalculateSIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculateSIServiceServer will
// result in compilation errors.
type UnsafeCalculateSIServiceServer interface {
	mustEmbedUnimplementedCalculateSIServiceServer()
}

func RegisterCalculateSIServiceServer(s grpc.ServiceRegistrar, srv CalculateSIServiceServer) {
	s.RegisterService(&CalculateSIService_ServiceDesc, srv)
}

func _CalculateSIService_CalculateSiAndTotAmount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateSIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculateSIServiceServer).CalculateSiAndTotAmount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CalculateSI.CalculateSIService/CalculateSiAndTotAmount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculateSIServiceServer).CalculateSiAndTotAmount(ctx, req.(*CalculateSIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculateSIService_CalculateSiAndTotAmountWithDeadline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateSIRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculateSIServiceServer).CalculateSiAndTotAmountWithDeadline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CalculateSI.CalculateSIService/CalculateSiAndTotAmountWithDeadline",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculateSIServiceServer).CalculateSiAndTotAmountWithDeadline(ctx, req.(*CalculateSIRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CalculateSIService_ServiceDesc is the grpc.ServiceDesc for CalculateSIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalculateSIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CalculateSI.CalculateSIService",
	HandlerType: (*CalculateSIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CalculateSiAndTotAmount",
			Handler:    _CalculateSIService_CalculateSiAndTotAmount_Handler,
		},
		{
			MethodName: "CalculateSiAndTotAmountWithDeadline",
			Handler:    _CalculateSIService_CalculateSiAndTotAmountWithDeadline_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "CalculateSimpleIntrestPb.proto",
}
