// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package PnDec

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PnDecServiceClient is the client API for PnDecService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PnDecServiceClient interface {
	PnDec(ctx context.Context, in *PnDecRequest, opts ...grpc.CallOption) (PnDecService_PnDecClient, error)
}

type pnDecServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPnDecServiceClient(cc grpc.ClientConnInterface) PnDecServiceClient {
	return &pnDecServiceClient{cc}
}

func (c *pnDecServiceClient) PnDec(ctx context.Context, in *PnDecRequest, opts ...grpc.CallOption) (PnDecService_PnDecClient, error) {
	stream, err := c.cc.NewStream(ctx, &PnDecService_ServiceDesc.Streams[0], "/PnDec.PnDecService/PnDec", opts...)
	if err != nil {
		return nil, err
	}
	x := &pnDecServicePnDecClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PnDecService_PnDecClient interface {
	Recv() (*PnDecResponse, error)
	grpc.ClientStream
}

type pnDecServicePnDecClient struct {
	grpc.ClientStream
}

func (x *pnDecServicePnDecClient) Recv() (*PnDecResponse, error) {
	m := new(PnDecResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PnDecServiceServer is the server API for PnDecService service.
// All implementations must embed UnimplementedPnDecServiceServer
// for forward compatibility
type PnDecServiceServer interface {
	PnDec(*PnDecRequest, PnDecService_PnDecServer) error
	//mustEmbedUnimplementedPnDecServiceServer()
}

// UnimplementedPnDecServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPnDecServiceServer struct {
}

func (UnimplementedPnDecServiceServer) PnDec(*PnDecRequest, PnDecService_PnDecServer) error {
	return status.Errorf(codes.Unimplemented, "method PnDec not implemented")
}
func (UnimplementedPnDecServiceServer) mustEmbedUnimplementedPnDecServiceServer() {}

// UnsafePnDecServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PnDecServiceServer will
// result in compilation errors.
type UnsafePnDecServiceServer interface {
	mustEmbedUnimplementedPnDecServiceServer()
}

func RegisterPnDecServiceServer(s grpc.ServiceRegistrar, srv PnDecServiceServer) {
	s.RegisterService(&PnDecService_ServiceDesc, srv)
}

func _PnDecService_PnDec_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PnDecRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PnDecServiceServer).PnDec(m, &pnDecServicePnDecServer{stream})
}

type PnDecService_PnDecServer interface {
	Send(*PnDecResponse) error
	grpc.ServerStream
}

type pnDecServicePnDecServer struct {
	grpc.ServerStream
}

func (x *pnDecServicePnDecServer) Send(m *PnDecResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PnDecService_ServiceDesc is the grpc.ServiceDesc for PnDecService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PnDecService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PnDec.PnDecService",
	HandlerType: (*PnDecServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "PnDec",
			Handler:       _PnDecService_PnDec_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "PnDec.proto",
}
