// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package calculatePb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalculateMaxSeviceClient is the client API for CalculateMaxSevice service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculateMaxSeviceClient interface {
	CalculateMaximun(ctx context.Context, opts ...grpc.CallOption) (CalculateMaxSevice_CalculateMaximunClient, error)
}

type calculateMaxSeviceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculateMaxSeviceClient(cc grpc.ClientConnInterface) CalculateMaxSeviceClient {
	return &calculateMaxSeviceClient{cc}
}

func (c *calculateMaxSeviceClient) CalculateMaximun(ctx context.Context, opts ...grpc.CallOption) (CalculateMaxSevice_CalculateMaximunClient, error) {
	stream, err := c.cc.NewStream(ctx, &CalculateMaxSevice_ServiceDesc.Streams[0], "/calculatePb.CalculateMaxSevice/CalculateMaximun", opts...)
	if err != nil {
		return nil, err
	}
	x := &calculateMaxSeviceCalculateMaximunClient{stream}
	return x, nil
}

type CalculateMaxSevice_CalculateMaximunClient interface {
	Send(*CalculateMaxRequest) error
	Recv() (*CalculateMaxResponse, error)
	grpc.ClientStream
}

type calculateMaxSeviceCalculateMaximunClient struct {
	grpc.ClientStream
}

func (x *calculateMaxSeviceCalculateMaximunClient) Send(m *CalculateMaxRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *calculateMaxSeviceCalculateMaximunClient) Recv() (*CalculateMaxResponse, error) {
	m := new(CalculateMaxResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculateMaxSeviceServer is the server API for CalculateMaxSevice service.
// All implementations must embed UnimplementedCalculateMaxSeviceServer
// for forward compatibility
type CalculateMaxSeviceServer interface {
	CalculateMaximun(CalculateMaxSevice_CalculateMaximunServer) error
	//mustEmbedUnimplementedCalculateMaxSeviceServer()
}

// UnimplementedCalculateMaxSeviceServer must be embedded to have forward compatible implementations.
type UnimplementedCalculateMaxSeviceServer struct {
}

func (UnimplementedCalculateMaxSeviceServer) CalculateMaximun(CalculateMaxSevice_CalculateMaximunServer) error {
	return status.Errorf(codes.Unimplemented, "method CalculateMaximun not implemented")
}
func (UnimplementedCalculateMaxSeviceServer) mustEmbedUnimplementedCalculateMaxSeviceServer() {}

// UnsafeCalculateMaxSeviceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculateMaxSeviceServer will
// result in compilation errors.
type UnsafeCalculateMaxSeviceServer interface {
	mustEmbedUnimplementedCalculateMaxSeviceServer()
}

func RegisterCalculateMaxSeviceServer(s grpc.ServiceRegistrar, srv CalculateMaxSeviceServer) {
	s.RegisterService(&CalculateMaxSevice_ServiceDesc, srv)
}

func _CalculateMaxSevice_CalculateMaximun_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculateMaxSeviceServer).CalculateMaximun(&calculateMaxSeviceCalculateMaximunServer{stream})
}

type CalculateMaxSevice_CalculateMaximunServer interface {
	Send(*CalculateMaxResponse) error
	Recv() (*CalculateMaxRequest, error)
	grpc.ServerStream
}

type calculateMaxSeviceCalculateMaximunServer struct {
	grpc.ServerStream
}

func (x *calculateMaxSeviceCalculateMaximunServer) Send(m *CalculateMaxResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *calculateMaxSeviceCalculateMaximunServer) Recv() (*CalculateMaxRequest, error) {
	m := new(CalculateMaxRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CalculateMaxSevice_ServiceDesc is the grpc.ServiceDesc for CalculateMaxSevice service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalculateMaxSevice_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculatePb.CalculateMaxSevice",
	HandlerType: (*CalculateMaxSeviceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CalculateMaximun",
			Handler:       _CalculateMaxSevice_CalculateMaximun_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "calculatePb.proto",
}
